<?xml version="1.0" encoding="UTF-8"?>
<!--
    scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration debug="false" scan="true" scanPeriod="3600 seconds">
    <!--level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR-->
    <contextName>logback</contextName>
    <!-- 定义日志的根目录 -->
    <!-- 文件相对保存路径设置可分以下三种：
        1. value=“logs” – 表示保存到程序运行目录，在tomcat中为bin目录
        2. value=“/logs” – 表示保存到系统目录
        3. value=“../logs” – 表示保存到程序运行目录的父目录
    -->
    <property name="LOG_HOME" value="log" />
    <!--定义参数,后面可以通过${DEBUG.NAME}使用-->
    <property name="DEBUG.NAME" value="debug"/>
    <property name="ERROR.NAME" value="error"/>
    <property name="APP.NAME" value="log"/>
    <!-- 定义日志文件大小和周期 -->
    <property name="log.maxSize" value="5MB"/>
    <property name="log.maxHistory" value="30"/>
    <!-- 定义日志级别 -->
    <property name="log.level" value="debug"/>
    <!-- 定义异常时邮件告警 -->
    <property name="smtpHost" value="smtp.qq.com"/>
    <property name="smtpPort" value="25"/>
    <property name="username" value="1015241415@qq.com"/>
    <property name="password" value="zevrpswkdwdzbgai"/>
    <property name="ssl" value="true"/>
    <!-- 指定多人用逗号隔开 -->
    <property name="emailTo" value="wangzhiwenem@163.com"/>
    <property name="emailFrom" value="1015241415@qq.com"/>
    <property name="emailSubject" value="【ERROR】：%logger"/>
    <!-- 可以配置颜色方案 -->
    <!-- %d{yyyy-MM-dd HH:mm:ss.SSS} ==== [%thread] ==== %-5level %logger{50} - %msg%n -->
    <!-- %yellow(%date{yyyy-MM-dd HH:mm:ss}) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n) -->
    <!-- %red(%date{yyyy-MM-dd HH:mm:ss}) %highlight(%-5level) %red([%thread]) %boldMagenta(%logger{50}) %cyan(%msg%n) -->
    <property name="CONSOLE_LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) --- [%thread] %green(%logger{50}) : %msg%n">
    </property>
    <property name="FILE_LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{50} : %msg%n">
    </property>

    <!--ConsoleAppender 用于在屏幕上输出日志-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--定义了一个过滤器,在LEVEL之下的日志输出不会被打印出来-->
        <!--这里定义了DEBUG，也就是控制台不会输出比DEBUG级别小的日志-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <!--定义控制台输出格式-->
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- ERROR级别日志-->
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
    <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 打印过滤级别 -->
        <!-- 日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>ERROR</level>
            <!-- 用于配置符合过滤条件的操作 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 最常用的滚动策略，它根据时间和大小来制定滚动策略.既负责滚动也负责触发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志输出位置 可相对、和绝对路径 -->
            <fileNamePattern>
                ${LOG_HOME}/error/${ERROR.NAME}.%d{yyyy-MM-dd}-%i.log
            </fileNamePattern>
            <!--
                可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件,假设设置每个月滚动，且<maxHistory>是6，
                则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除
            -->
            <maxHistory>${log.maxHistory}</maxHistory>
            <!--日志文件最大的大小，超过此大小时压缩日志并保存-->
            <maxFileSize>${log.maxSize}</maxFileSize>
        </rollingPolicy>
        <!--定义输出格式-->
         <encoder>
             <pattern>${FILE_LOG_PATTERN}</pattern>
             <charset>UTF-8</charset>
         </encoder>
    </appender>

    <!-- 写入文件 -->
    <appender name="debug" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>
                ${LOG_HOME}/debug/${DEBUG.NAME}.%d{yyyy-MM-dd}-%i.log.gz
            </fileNamePattern>
            <maxHistory>${log.maxHistory}</maxHistory>
            <maxFileSize>${log.maxSize}</maxFileSize>
        </rollingPolicy>
         <encoder>
             <pattern>${FILE_LOG_PATTERN}</pattern>
             <charset>UTF-8</charset>
         </encoder>
    </appender>

    <!--设置一个向上传递的appender,所有级别的日志都会输出-->
    <appender name="app" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/app/${APP.NAME}.%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <maxHistory>${log.maxHistory}</maxHistory>
            <MaxFileSize>${log.maxSize}</MaxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- error邮件发送 -->
    <appender name="email" class="ch.qos.logback.classic.net.SMTPAppender">
        <smtpHost>${smtpHost}</smtpHost>
        <smtpPort>${smtpPort}</smtpPort>
        <SSL>${ssl}</SSL>
        <asynchronousSending>true</asynchronousSending>
        <username>${username}</username>
        <password>${password}</password>
        <to>${emailTo}</to>
        <from>${emailFrom}</from>
        <subject>${emailSubject}</subject>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </layout>
        <!-- html格式-->
        <!--<layout class="ch.qos.logback.classic.html.HTMLLayout">
            <Pattern>%date%level%thread%logger{0}%line%message</Pattern>
        </layout>-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
    </appender>

    <!--对于类路径以 springbootcase.demo 开头的Logger,输出级别设置为debug,并且输出到控制台和写入日志文件-->
    <!--这个logger没有指定appender，它会继承root节点中定义的那些appender-->
    <logger name="springbootcase.demo" level="debug"/>


    <!--由于这个logger自动继承了root的appender，root中已经有stdout的appender了，自己这边又引入了stdout的appender-->
    <!--如果没有设置 additivity="false" ,就会导致一条日志在控制台输出两次的情况-->
    <!--additivity表示要不要使用rootLogger配置的appender进行输出-->
    <!--level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR-->
    <logger name="org.springframework" level="debug" additivity="false">
        <appender-ref ref="console"/>
        <appender-ref ref="debug"/>
    </logger>
    <logger name="org.apache.ibatis" level="debug" additivity="false">
        <appender-ref ref="console"/>
        <appender-ref ref="debug"/>
    </logger>
    <!-- quartz日志级别设置为error级别，防止不停打印日志 -->
    <logger name="org.quartz" level="error" additivity="false">
        <appender-ref ref="console"/>
        <appender-ref ref="debug"/>
    </logger>

    <!--通过 LoggerFactory.getLogger("mytest") 可以获取到这个logger-->
    <!--由于设置了 additivity="false" ，所以输出时不会使用rootLogger的appender-->
    <!--但是这个logger本身又没有配置appender，所以使用这个logger输出日志的话就不会输出到任何地方-->
    <logger name="mytest2" level="info" additivity="false"/>

    <!--root是默认的logger 这里设定输出级别是debug-->
    <root level="${log.level}">
        <!--定义了多个appender，日志会通过往这多个appender里面写-->
        <appender-ref ref="console"/>
        <!-- 不管什么包下的日志都输出文件 -->
        <appender-ref ref="error"/>
        <appender-ref ref="debug"/>
        <appender-ref ref="app"/>
        <appender-ref ref="email"/>
    </root>

    <!--
    TimeBaseRollingPolicy根据fileNamePattern标签来表示什么周期触发一次生成新的日志文件,
    maxHistory表示保存日志的最大单位时间, 下面这个表示每天生成一个日志文件,最多保存30天
    -->
    <!--
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        　<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
        　　　　<fileNamePattern>logFile.%d{yyyy-MM-dd}.log</fileNamePattern>
        　　　　<maxHistory>30</maxHistory>
        　</rollingPolicy>
        　<encoder>
        　　　　<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        　</encoder>
    </appender>
    -->

    <!--
    SizeBasedTriggeringPolicy表示基于文件大小进行滚动
    当文件大于5MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。
    -->
    <!--
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>test.log</file>
        　　<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
        　　　　　<fileNamePattern>tests.%i.log.zip</fileNamePattern>
        　　　　　<minIndex>1</minIndex>
        　　　　　<maxIndex>3</maxIndex>
        　　　</rollingPolicy>
        　　　<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
        　　　     <maxFileSize>5MB</maxFileSize>
        　　　</triggeringPolicy>
        　　　<encoder>
        　　　　　<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        　　　</encoder>
    </appender>
    -->
</configuration>